{
  "verbose": false,
  "metadata_version": 1.8,
  "service_broker": false,
  "icon_file": "resources/icon.png",
  "all_properties": [
    {
      "name": "author",
      "default": "Tile Ninja",
      "optional": false,
      "label": "Author",
      "configurable": false,
      "type": "string"
    },
    {
      "type": "string",
      "label": "Full Name",
      "optional": true,
      "name": "customer_name",
      "configurable": true
    },
    {
      "description": "Address to use for junk mail",
      "type": "string",
      "label": "Street Address",
      "configurable": true,
      "optional": false,
      "name": "street_address"
    },
    {
      "type": "string",
      "label": "City",
      "optional": false,
      "name": "city",
      "configurable": true
    },
    {
      "name": "zip_code",
      "default": "90310",
      "type": "string",
      "label": "ZIP+4",
      "configurable": true,
      "optional": false
    },
    {
      "name": "country",
      "type": "dropdown_select",
      "label": "Country",
      "configurable": true,
      "optional": false,
      "options": [
        {
          "default": true,
          "name": "country_us",
          "label": "US"
        },
        {
          "name": "country_elsewhere",
          "label": "Elsewhere"
        }
      ]
    },
    {
      "name": "example_collection",
      "default": [
        {
          "album": "Christmas Carols",
          "explicit": true,
          "artist": "Ops Manatee"
        }
      ],
      "optional": false,
      "configurable": true,
      "property_blueprints": [
        {
          "type": "string",
          "name": "album",
          "label": "Album"
        },
        {
          "type": "string",
          "name": "artist",
          "label": "Artist"
        },
        {
          "type": "boolean",
          "name": "explicit",
          "label": "Explicit"
        }
      ],
      "label": "Albums",
      "type": "collection"
    },
    {
      "name": "example_selector",
      "default": "Pizza",
      "optional": false,
      "configurable": true,
      "option_templates": [
        {
          "select_value": "Pizza",
          "name": "pizza_option",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "boolean",
              "name": "pepperoni",
              "label": "Pepperoni"
            },
            {
              "configurable": true,
              "type": "boolean",
              "name": "pineapple",
              "label": "Pineapple"
            },
            {
              "optional": true,
              "configurable": true,
              "type": "string",
              "name": "other_toppings",
              "label": "Other Toppings"
            }
          ]
        },
        {
          "select_value": "Filet Mignon",
          "name": "filet_mignon_option",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "simple_credentials",
              "name": "steak_creds",
              "label": "Complex type inside selector"
            },
            {
              "name": "rarity_dropdown",
              "default": "rare",
              "configurable": true,
              "label": "How rare?",
              "type": "dropdown_select",
              "options": [
                {
                  "name": "rare",
                  "label": "Rare"
                },
                {
                  "name": "medium",
                  "label": "Medium"
                },
                {
                  "name": "well-done",
                  "label": "Well done"
                }
              ]
            }
          ]
        }
      ],
      "label": "Food Choices",
      "type": "selector"
    },
    {
      "description": "Example of simple credentials type",
      "type": "simple_credentials",
      "label": "Simple Credentials",
      "configurable": true,
      "optional": false,
      "name": "my_creds"
    },
    {
      "name": "username",
      "type": "string",
      "label": "Username",
      "configurable": true,
      "optional": false,
      "constraints": [
        {
          "must_match_regex": "^[^!@#$%^&*()]*$",
          "error_message": "This name cannot contain capital digits."
        }
      ]
    },
    {
      "type": "secret",
      "label": "Password",
      "optional": false,
      "name": "password",
      "configurable": true
    },
    {
      "description": "Maximum amount of time to allow canaries to take before going healthy",
      "type": "integer",
      "label": "Canary Watch Timeout",
      "configurable": true,
      "optional": false,
      "name": "canary_watch_timeout"
    },
    {
      "description": "Maximum amount of time to allow non-canaries to take before going healthy",
      "type": "integer",
      "label": "Update Watch Timeout",
      "configurable": true,
      "optional": false,
      "name": "update_watch_timeout"
    },
    {
      "description": "Choose whether or not to enable this feature.",
      "default": "feature_disabled",
      "type": "selector",
      "label": "Enable this feature?",
      "option_templates": [
        {
          "select_value": "feature_enabled",
          "description": "Enable this feature (requires more config).",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "string",
              "name": "feature_config",
              "label": "Configure this feature"
            }
          ],
          "name": "feature_enabled",
          "label": "Enable feature"
        },
        {
          "select_value": "feature_disabled",
          "description": "Disable this feature (no more config).",
          "name": "feature_disabled",
          "label": "Disable feature"
        }
      ],
      "configurable": true,
      "optional": false,
      "name": "is_feature_enabled"
    },
    {
      "name": "planets",
      "type": "multi_select_options",
      "label": "Planets",
      "configurable": true,
      "optional": true,
      "options": [
        {
          "name": "mercury",
          "label": "mercury"
        },
        {
          "name": "Venus",
          "label": "venus"
        },
        {
          "name": "Earth",
          "label": "earth"
        },
        {
          "name": "Mars",
          "label": "mars"
        },
        {
          "name": "Jupiter",
          "label": "jupiter"
        },
        {
          "name": "Saturn",
          "label": "saturn"
        },
        {
          "name": "Uranus",
          "label": "uranus"
        },
        {
          "name": "Neptune",
          "label": "neptune"
        }
      ]
    },
    {
      "name": "app_instances",
      "default": 2,
      "type": "integer",
      "label": "Dynamic app instance count",
      "configurable": true,
      "optional": false
    },
    {
      "name": "auto_service_name",
      "default": "tg-test-broker1-service",
      "type": "string",
      "label": "Auto services service name",
      "configurable": true,
      "optional": false
    }
  ],
  "runtime_configs": [
    {
      "name": "example-runtime-config",
      "runtime_config": "addons:\n- include:\n    jobs:\n    - name: no-op\n      release: no-op-release\n  jobs:\n  - name: hello\n    release: runtime-test-release\n  name: runtime-test-release\n  properties:\n    hello:\n      port: 8119\nreleases:\n- name: runtime-test-release\n  version: 0.1.3\n"
    }
  ],
  "pre_delete_errands": [
    {
      "name": "delete-all"
    }
  ],
  "space": "test-tile-space",
  "label": "Generated Test Tile",
  "forms": [
    {
      "label": "Contact Info",
      "properties": [
        {
          "type": "string",
          "label": "Full Name",
          "optional": true,
          "name": "customer_name",
          "configurable": true
        },
        {
          "description": "Address to use for junk mail",
          "type": "string",
          "label": "Street Address",
          "configurable": true,
          "optional": false,
          "name": "street_address"
        },
        {
          "type": "string",
          "label": "City",
          "optional": false,
          "name": "city",
          "configurable": true
        },
        {
          "name": "zip_code",
          "default": "90310",
          "type": "string",
          "label": "ZIP+4",
          "configurable": true,
          "optional": false
        },
        {
          "name": "country",
          "type": "dropdown_select",
          "label": "Country",
          "configurable": true,
          "optional": false,
          "options": [
            {
              "default": true,
              "name": "country_us",
              "label": "US"
            },
            {
              "name": "country_elsewhere",
              "label": "Elsewhere"
            }
          ]
        }
      ],
      "name": "contact_form",
      "description": "Examples of basic property types"
    },
    {
      "label": "Albums",
      "properties": [
        {
          "name": "example_collection",
          "default": [
            {
              "album": "Christmas Carols",
              "explicit": true,
              "artist": "Ops Manatee"
            }
          ],
          "optional": false,
          "configurable": true,
          "property_blueprints": [
            {
              "type": "string",
              "name": "album",
              "label": "Album"
            },
            {
              "type": "string",
              "name": "artist",
              "label": "Artist"
            },
            {
              "type": "boolean",
              "name": "explicit",
              "label": "Explicit"
            }
          ],
          "label": "Albums",
          "type": "collection"
        }
      ],
      "name": "albums_form",
      "description": "Example of collection property type"
    },
    {
      "label": "Food Order",
      "properties": [
        {
          "name": "example_selector",
          "default": "Pizza",
          "optional": false,
          "configurable": true,
          "option_templates": [
            {
              "select_value": "Pizza",
              "name": "pizza_option",
              "property_blueprints": [
                {
                  "configurable": true,
                  "type": "boolean",
                  "name": "pepperoni",
                  "label": "Pepperoni"
                },
                {
                  "configurable": true,
                  "type": "boolean",
                  "name": "pineapple",
                  "label": "Pineapple"
                },
                {
                  "optional": true,
                  "configurable": true,
                  "type": "string",
                  "name": "other_toppings",
                  "label": "Other Toppings"
                }
              ]
            },
            {
              "select_value": "Filet Mignon",
              "name": "filet_mignon_option",
              "property_blueprints": [
                {
                  "configurable": true,
                  "type": "simple_credentials",
                  "name": "steak_creds",
                  "label": "Complex type inside selector"
                },
                {
                  "name": "rarity_dropdown",
                  "default": "rare",
                  "configurable": true,
                  "label": "How rare?",
                  "type": "dropdown_select",
                  "options": [
                    {
                      "name": "rare",
                      "label": "Rare"
                    },
                    {
                      "name": "medium",
                      "label": "Medium"
                    },
                    {
                      "name": "well-done",
                      "label": "Well done"
                    }
                  ]
                }
              ]
            }
          ],
          "label": "Food Choices",
          "type": "selector"
        }
      ],
      "name": "food_form",
      "description": "Example of selector property type"
    },
    {
      "label": "Credentials",
      "properties": [
        {
          "description": "Example of simple credentials type",
          "type": "simple_credentials",
          "label": "Simple Credentials",
          "configurable": true,
          "optional": false,
          "name": "my_creds"
        },
        {
          "name": "username",
          "type": "string",
          "label": "Username",
          "configurable": true,
          "optional": false,
          "constraints": [
            {
              "must_match_regex": "^[^!@#$%^&*()]*$",
              "error_message": "This name cannot contain capital digits."
            }
          ]
        },
        {
          "type": "secret",
          "label": "Password",
          "optional": false,
          "name": "password",
          "configurable": true
        }
      ],
      "name": "credentials_form",
      "description": "Examples of secret property types"
    },
    {
      "label": "Update Settings",
      "properties": [
        {
          "description": "Maximum amount of time to allow canaries to take before going healthy",
          "type": "integer",
          "label": "Canary Watch Timeout",
          "configurable": true,
          "optional": false,
          "name": "canary_watch_timeout"
        },
        {
          "description": "Maximum amount of time to allow non-canaries to take before going healthy",
          "type": "integer",
          "label": "Update Watch Timeout",
          "configurable": true,
          "optional": false,
          "name": "update_watch_timeout"
        }
      ],
      "name": "update_form",
      "description": "Example of user-configured update Settings"
    },
    {
      "label": "Selector without subproperties",
      "properties": [
        {
          "description": "Choose whether or not to enable this feature.",
          "default": "feature_disabled",
          "type": "selector",
          "label": "Enable this feature?",
          "option_templates": [
            {
              "select_value": "feature_enabled",
              "description": "Enable this feature (requires more config).",
              "property_blueprints": [
                {
                  "configurable": true,
                  "type": "string",
                  "name": "feature_config",
                  "label": "Configure this feature"
                }
              ],
              "name": "feature_enabled",
              "label": "Enable feature"
            },
            {
              "select_value": "feature_disabled",
              "description": "Disable this feature (no more config).",
              "name": "feature_disabled",
              "label": "Disable feature"
            }
          ],
          "configurable": true,
          "optional": false,
          "name": "is_feature_enabled"
        }
      ],
      "name": "selector_without_subproperties",
      "description": "Configure this feature."
    },
    {
      "label": "Multi-Select Example",
      "properties": [
        {
          "name": "planets",
          "type": "multi_select_options",
          "label": "Planets",
          "configurable": true,
          "optional": true,
          "options": [
            {
              "name": "mercury",
              "label": "mercury"
            },
            {
              "name": "Venus",
              "label": "venus"
            },
            {
              "name": "Earth",
              "label": "earth"
            },
            {
              "name": "Mars",
              "label": "mars"
            },
            {
              "name": "Jupiter",
              "label": "jupiter"
            },
            {
              "name": "Saturn",
              "label": "saturn"
            },
            {
              "name": "Uranus",
              "label": "uranus"
            },
            {
              "name": "Neptune",
              "label": "neptune"
            }
          ]
        }
      ],
      "name": "planets_form"
    },
    {
      "label": "App manifest config",
      "properties": [
        {
          "name": "app_instances",
          "default": 2,
          "type": "integer",
          "label": "Dynamic app instance count",
          "configurable": true,
          "optional": false
        }
      ],
      "name": "app_manifest_form"
    },
    {
      "label": "Auto services config",
      "properties": [
        {
          "name": "auto_service_name",
          "default": "tg-test-broker1-service",
          "type": "string",
          "label": "Auto services service name",
          "configurable": true,
          "optional": false
        }
      ],
      "name": "auto_services_form"
    }
  ],
  "description": "A sample tile generated by tile-generator",
  "releases": {
    "tg_test_app6": {
      "jobs": [
        {
          "templates": [
            {
              "release": "no-op-release",
              "name": "no-op"
            },
            {
              "release": "routing",
              "name": "route_registrar",
              "consumes": {
                "nats": {
                  "from": "nats",
                  "deployment": "(( ..cf.deployment_name ))"
                }
              }
            }
          ],
          "is_static": false,
          "dynamic_ip": 1,
          "name": "node-yes",
          "varname": "node_yes",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ],
                  "port": 8119,
                  "name": "runtime_conf_yes"
                }
              ]
            },
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "instances": 1,
          "template": "node-yes",
          "type": "node-yes",
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "port": 8119,
                  "name": "runtime_conf_yes",
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }
        },
        {
          "templates": [
            {
              "release": "routing",
              "name": "route_registrar",
              "consumes": {
                "nats": {
                  "from": "nats",
                  "deployment": "(( ..cf.deployment_name ))"
                }
              }
            }
          ],
          "is_static": false,
          "dynamic_ip": 1,
          "name": "node-no",
          "varname": "node_no",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ],
                  "port": 8119,
                  "name": "runtime_conf_no"
                }
              ]
            },
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "instances": 1,
          "template": "node-no",
          "type": "node-no",
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "port": 8119,
                  "name": "runtime_conf_no",
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }
        }
      ],
      "name": "tg_test_app6",
      "path": "resources/no-op-release.tgz",
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "tg_test_app6": {
          "name": "tg_test_app6"
        }
      }
    },
    "tg_test_app5": {
      "jobs": [
        {
          "templates": [
            {
              "release": "redis",
              "name": "redis"
            }
          ],
          "ephemeral_disk": 4096,
          "dynamic_ip": 1,
          "name": "redis",
          "varname": "redis",
          "is_static": false,
          "static_ip": 0,
          "instances": 2,
          "default_internet_connected": false,
          "max_in_flight": 1,
          "persistent_disk": 4096,
          "memory": 512,
          "cpu": 2,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "type": "redis",
          "properties": {
            "password": "red!s"
          },
          "template": "redis"
        },
        {
          "templates": [
            {
              "release": "redis",
              "name": "sanity-tests"
            }
          ],
          "ephemeral_disk": 4096,
          "dynamic_ip": 1,
          "name": "sanity-tests",
          "post_deploy": true,
          "varname": "sanity_tests",
          "is_static": false,
          "lifecycle": "errand",
          "cpu": 2,
          "persistent_disk": 0,
          "memory": 512,
          "run_post_deploy_errand_default": "when-changed",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "some": "property",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "type": "sanity-tests",
          "properties": {
            "cf": {
              "some": "property"
            }
          },
          "template": "sanity-tests"
        }
      ],
      "name": "tg_test_app5",
      "path": "resources/redis-13.1.2.tgz",
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "tg_test_app5": {
          "name": "tg_test_app5"
        }
      }
    },
    "docker-boshrelease": {
      "path": "https://bosh.io/d/github.com/cf-platform-eng/docker-boshrelease",
      "name": "docker-boshrelease"
    },
    "runtime_test_release": {
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "runtime_test_release": {
          "name": "runtime_test_release"
        }
      },
      "name": "runtime_test_release",
      "path": "resources/runtime-test-release.tgz"
    },
    "test-tile": {
      "is_cf": true,
      "jobs": [
        {
          "properties": {},
          "name": "deploy-all",
          "post_deploy": true,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "user": "(( .deploy-all.app_credentials.identity ))",
              "password": "(( .deploy-all.app_credentials.password ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "user": "(( .deploy-all.app_credentials.identity ))",
              "password": "(( .deploy-all.app_credentials.password ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "security": {
              "password": "(( .deploy-all.app_credentials.password ))",
              "user": "(( .deploy-all.app_credentials.identity ))"
            },
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "template": "deploy-all",
          "type": "deploy-all",
          "lifecycle": "errand"
        },
        {
          "pre_delete": true,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "template": "delete-all",
          "lifecycle": "errand",
          "type": "delete-all",
          "properties": {},
          "name": "delete-all"
        },
        {
          "name": "docker-bosh-tg_test_app4",
          "package": {
            "files": [
              {
                "path": "docker:guidowb/sample-cf-app",
                "name": "guidowb-sample-cf-app.tgz"
              }
            ],
            "ephemeral_disk": 4096,
            "name": "tg_test_app4",
            "docker_images": [
              "guidowb/sample-cf-app"
            ],
            "is_docker_bosh": true,
            "manifest": {
              "containers": [
                {
                  "bind_ports": [
                    "80:80",
                    "443:443",
                    "8080:8080",
                    "8443:8443"
                  ],
                  "image": "guidowb/sample-cf-app",
                  "env_file": [
                    "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
                  ],
                  "name": "app"
                }
              ]
            },
            "instances": 1,
            "persistent_disk": 2048,
            "is_docker": true,
            "memory": 512,
            "routes": [
              {
                "prefix": "my-route",
                "port": 8080
              }
            ],
            "package-type": "docker-bosh",
            "cpu": 2,
            "properties": {
              "tg_test_app4": {
                "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
                "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
                "name": "tg_test_app4"
              }
            }
          },
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "template": "docker-bosh",
          "type": "docker-bosh-tg_test_app4",
          "properties": {}
        }
      ],
      "name": "test-tile",
      "requires_docker_bosh": true,
      "requires_meta_buildpack": true,
      "consumes_for_deployment": {
        "nats": {
          "from": "nats",
          "deployment": "(( ..cf.deployment_name ))"
        },
        "redis": {
          "from": "redis"
        }
      },
      "packages": [
        {
          "files": [
            {
              "path": "resources/app.zip",
              "name": "app.zip"
            }
          ],
          "is_cf": true,
          "name": "tg_test_app1",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "memory": "256M",
            "command": "python app.py",
            "instances": "(( .properties.app_instances.value ))"
          },
          "is_app": true,
          "package-type": "app",
          "manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "memory": "256M",
            "command": "python app.py",
            "instances": "(( .properties.app_instances.value ))"
          },
          "properties": {
            "tg_test_app1": {
              "auto_services": [],
              "name": "tg_test_app1",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "memory": "256M",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "http://cli.run.pivotal.io/stable?release=linux64-binary&source=github-rel",
              "name": "cf-linux-amd64.tgz"
            },
            {
              "path": "tile_generator/templates/src/templates/all_open.json",
              "name": "all_open.json"
            }
          ],
          "name": "cf_cli",
          "dir": "blobs",
          "template": "cf_cli"
        },
        {
          "files": [
            {
              "path": "src/app",
              "name": "app"
            }
          ],
          "is_cf": true,
          "name": "tg_test_app1_auto_zip",
          "app_manifest": {
            "path": "app",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "is_app": true,
          "package-type": "app",
          "manifest": {
            "path": "app",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "properties": {
            "tg_test_app1_auto_zip": {
              "auto_services": [],
              "name": "tg_test_app1_auto_zip",
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "src/binary-app/binary-app.py",
              "name": "binary-app.py"
            }
          ],
          "is_cf": true,
          "name": "tg_test_binary_app",
          "app_manifest": {
            "path": "binary-app.py",
            "buildpack": "binary_buildpack",
            "command": "./binary-app.py",
            "memory": "256M"
          },
          "is_app": true,
          "package-type": "app",
          "manifest": {
            "path": "binary-app.py",
            "buildpack": "binary_buildpack",
            "command": "./binary-app.py",
            "memory": "256M"
          },
          "properties": {
            "tg_test_binary_app": {
              "auto_services": [],
              "name": "tg_test_binary_app",
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "resources/app.zip",
              "name": "app.zip"
            }
          ],
          "is_cf": true,
          "name": "tg_test_broker1",
          "enable_global_access_to_plans": true,
          "manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "is_app": true,
          "is_broker": true,
          "package-type": "app-broker",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "properties": {
            "tg_test_broker1": {
              "name": "tg_test_broker1",
              "auto_services": [],
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "resources/app.zip",
              "name": "app.zip"
            }
          ],
          "is_cf": true,
          "needs_cf_credentials": true,
          "health_check": "none",
          "name": "tg_test_app2",
          "consumes": {
            "nats": {
              "from": "nats",
              "deployment": "(( ..cf.deployment_name ))"
            },
            "redis": {
              "from": "redis"
            }
          },
          "manifest": {
            "path": "app.zip",
            "host": "tg-test-app2-hostname",
            "command": "python app.py",
            "buildpack": "python_buildpack",
            "memory": "256M"
          },
          "is_app": true,
          "auto_services": [
            {
              "name": "tg-test-broker1-service",
              "plan": "first-plan"
            },
            {
              "name": "(( .properties.auto_service_name.value ))"
            }
          ],
          "package-type": "app",
          "app_manifest": {
            "path": "app.zip",
            "host": "tg-test-app2-hostname",
            "command": "python app.py",
            "buildpack": "python_buildpack",
            "memory": "256M"
          },
          "properties": {
            "tg_test_app2": {
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2",
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "resources/app.zip",
              "name": "app.zip"
            }
          ],
          "is_cf": true,
          "internal_service_names": [
            "service1",
            "service2"
          ],
          "name": "tg_test_broker2",
          "consumes": {
            "nats": {
              "from": "nats",
              "deployment": "(( ..cf.deployment_name ))"
            },
            "redis": {
              "from": "redis"
            }
          },
          "manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "is_app": true,
          "is_broker": true,
          "package-type": "app-broker",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          },
          "properties": {
            "tg_test_broker2": {
              "name": "tg_test_broker2",
              "auto_services": [],
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "resources/buildpack.zip",
              "name": "buildpack.zip"
            }
          ],
          "is_cf": true,
          "name": "tg_test_buildpack",
          "is_buildpack": true,
          "package-type": "buildpack",
          "buildpack_order": 99,
          "path": "buildpack.zip",
          "properties": {
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            }
          }
        },
        {
          "files": [
            {
              "path": "resources/decorator.zip",
              "name": "decorator.zip"
            }
          ],
          "is_cf": true,
          "name": "tg_test_decorator",
          "is_buildpack": true,
          "package-type": "decorator",
          "path": "decorator.zip",
          "properties": {
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            }
          }
        },
        {
          "files": [],
          "is_cf": true,
          "name": "tg_test_app3",
          "image": "guidowb/sample-cf-app",
          "is_docker_app": true,
          "manifest": {
            "memory": "256M"
          },
          "is_app": true,
          "auto_services": [
            {
              "plan": "second-plan",
              "name": "tg-test-broker1-service",
              "service_instance": "tg-test-svc"
            }
          ],
          "is_docker": true,
          "package-type": "docker-app",
          "app_manifest": {
            "memory": "256M"
          },
          "properties": {
            "tg_test_app3": {
              "auto_services": [
                {
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service",
                  "service_instance": "tg-test-svc"
                }
              ],
              "name": "tg_test_app3",
              "app_manifest": {
                "memory": "256M"
              }
            }
          }
        },
        {
          "files": [
            {
              "path": "docker:guidowb/sample-cf-app",
              "name": "guidowb-sample-cf-app.tgz"
            }
          ],
          "ephemeral_disk": 4096,
          "name": "tg_test_app4",
          "docker_images": [
            "guidowb/sample-cf-app"
          ],
          "is_docker_bosh": true,
          "manifest": {
            "containers": [
              {
                "bind_ports": [
                  "80:80",
                  "443:443",
                  "8080:8080",
                  "8443:8443"
                ],
                "image": "guidowb/sample-cf-app",
                "env_file": [
                  "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
                ],
                "name": "app"
              }
            ]
          },
          "instances": 1,
          "persistent_disk": 2048,
          "is_docker": true,
          "memory": 512,
          "routes": [
            {
              "prefix": "my-route",
              "port": 8080
            }
          ],
          "package-type": "docker-bosh",
          "cpu": 2,
          "properties": {
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            }
          }
        },
        {
          "files": [
            {
              "path": "tile_generator/templates/src/common/utils.sh",
              "name": "utils.sh"
            }
          ],
          "name": "common",
          "dir": "src",
          "template": "common"
        }
      ],
      "requires_cf_cli": true,
      "consumes": {
        "nats": {
          "from": "nats",
          "deployment": "(( ..cf.deployment_name ))"
        },
        "redis": {
          "from": "redis"
        }
      }
    },
    "meta-buildpack": {
      "path": "github://cf-platform-eng/meta-buildpack/meta-buildpack.tgz",
      "jobs": [
        {
          "properties": {},
          "name": "deploy-meta-buildpack",
          "post_deploy": true,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "user": "(( .deploy-meta-buildpack.app_credentials.identity ))",
              "password": "(( .deploy-meta-buildpack.app_credentials.password ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "user": "(( .deploy-meta-buildpack.app_credentials.identity ))",
              "password": "(( .deploy-meta-buildpack.app_credentials.password ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "security": {
              "password": "(( .deploy-meta-buildpack.app_credentials.password ))",
              "user": "(( .deploy-meta-buildpack.app_credentials.identity ))"
            },
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "template": "deploy-all",
          "type": "deploy-all",
          "lifecycle": "errand"
        },
        {
          "pre_delete": true,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "template": "delete-all",
          "lifecycle": "errand",
          "type": "delete-all",
          "properties": {},
          "name": "delete-meta-buildpack"
        }
      ],
      "name": "meta-buildpack"
    },
    "routing": {
      "path": "https://bosh.io/d/github.com/cloudfoundry-incubator/cf-routing-release",
      "name": "routing"
    }
  },
  "apply_open_security_group": false,
  "update": {
    "update_watch_time": "10000-(( .properties.update_watch_timeout ))",
    "canary_watch_time": "10000-(( .properties.canary_watch_timeout ))"
  },
  "post_deploy_errands": [
    {
      "name": "deploy-all"
    }
  ],
  "packages": [
    {
      "files": [
        {
          "path": "resources/app.zip",
          "name": "app.zip"
        }
      ],
      "is_cf": true,
      "name": "tg_test_app1",
      "app_manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "memory": "256M",
        "command": "python app.py",
        "instances": "(( .properties.app_instances.value ))"
      },
      "is_app": true,
      "package-type": "app",
      "manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "memory": "256M",
        "command": "python app.py",
        "instances": "(( .properties.app_instances.value ))"
      },
      "properties": {
        "tg_test_app1": {
          "auto_services": [],
          "name": "tg_test_app1",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "memory": "256M",
            "command": "python app.py",
            "instances": "(( .properties.app_instances.value ))"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "src/app",
          "name": "app"
        }
      ],
      "is_cf": true,
      "name": "tg_test_app1_auto_zip",
      "app_manifest": {
        "path": "app",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "is_app": true,
      "package-type": "app",
      "manifest": {
        "path": "app",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "properties": {
        "tg_test_app1_auto_zip": {
          "auto_services": [],
          "name": "tg_test_app1_auto_zip",
          "app_manifest": {
            "path": "app",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "src/binary-app/binary-app.py",
          "name": "binary-app.py"
        }
      ],
      "is_cf": true,
      "name": "tg_test_binary_app",
      "app_manifest": {
        "path": "binary-app.py",
        "buildpack": "binary_buildpack",
        "command": "./binary-app.py",
        "memory": "256M"
      },
      "is_app": true,
      "package-type": "app",
      "manifest": {
        "path": "binary-app.py",
        "buildpack": "binary_buildpack",
        "command": "./binary-app.py",
        "memory": "256M"
      },
      "properties": {
        "tg_test_binary_app": {
          "auto_services": [],
          "name": "tg_test_binary_app",
          "app_manifest": {
            "path": "binary-app.py",
            "buildpack": "binary_buildpack",
            "command": "./binary-app.py",
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "resources/app.zip",
          "name": "app.zip"
        }
      ],
      "is_cf": true,
      "name": "tg_test_broker1",
      "enable_global_access_to_plans": true,
      "manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "is_app": true,
      "is_broker": true,
      "package-type": "app-broker",
      "app_manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "properties": {
        "tg_test_broker1": {
          "name": "tg_test_broker1",
          "auto_services": [],
          "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "resources/app.zip",
          "name": "app.zip"
        }
      ],
      "is_cf": true,
      "needs_cf_credentials": true,
      "health_check": "none",
      "name": "tg_test_app2",
      "consumes": {
        "nats": {
          "from": "nats",
          "deployment": "(( ..cf.deployment_name ))"
        },
        "redis": {
          "from": "redis"
        }
      },
      "manifest": {
        "path": "app.zip",
        "host": "tg-test-app2-hostname",
        "command": "python app.py",
        "buildpack": "python_buildpack",
        "memory": "256M"
      },
      "is_app": true,
      "auto_services": [
        {
          "name": "tg-test-broker1-service",
          "plan": "first-plan"
        },
        {
          "name": "(( .properties.auto_service_name.value ))"
        }
      ],
      "package-type": "app",
      "app_manifest": {
        "path": "app.zip",
        "host": "tg-test-app2-hostname",
        "command": "python app.py",
        "buildpack": "python_buildpack",
        "memory": "256M"
      },
      "properties": {
        "tg_test_app2": {
          "auto_services": [
            {
              "name": "tg-test-broker1-service",
              "plan": "first-plan"
            },
            {
              "name": "(( .properties.auto_service_name.value ))"
            }
          ],
          "name": "tg_test_app2",
          "app_manifest": {
            "path": "app.zip",
            "host": "tg-test-app2-hostname",
            "command": "python app.py",
            "buildpack": "python_buildpack",
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "resources/app.zip",
          "name": "app.zip"
        }
      ],
      "is_cf": true,
      "internal_service_names": [
        "service1",
        "service2"
      ],
      "name": "tg_test_broker2",
      "consumes": {
        "nats": {
          "from": "nats",
          "deployment": "(( ..cf.deployment_name ))"
        },
        "redis": {
          "from": "redis"
        }
      },
      "manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "is_app": true,
      "is_broker": true,
      "package-type": "app-broker",
      "app_manifest": {
        "path": "app.zip",
        "buildpack": "python_buildpack",
        "command": "python app.py",
        "memory": "256M"
      },
      "properties": {
        "tg_test_broker2": {
          "name": "tg_test_broker2",
          "auto_services": [],
          "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
          "app_manifest": {
            "path": "app.zip",
            "buildpack": "python_buildpack",
            "command": "python app.py",
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "resources/buildpack.zip",
          "name": "buildpack.zip"
        }
      ],
      "is_cf": true,
      "name": "tg_test_buildpack",
      "is_buildpack": true,
      "package-type": "buildpack",
      "buildpack_order": 99,
      "path": "buildpack.zip",
      "properties": {
        "tg_test_buildpack": {
          "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
          "name": "tg_test_buildpack"
        }
      }
    },
    {
      "files": [
        {
          "path": "resources/decorator.zip",
          "name": "decorator.zip"
        }
      ],
      "is_cf": true,
      "name": "tg_test_decorator",
      "is_buildpack": true,
      "package-type": "decorator",
      "path": "decorator.zip",
      "properties": {
        "tg_test_decorator": {
          "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
          "name": "tg_test_decorator"
        }
      }
    },
    {
      "files": [],
      "is_cf": true,
      "name": "tg_test_app3",
      "image": "guidowb/sample-cf-app",
      "is_docker_app": true,
      "manifest": {
        "memory": "256M"
      },
      "is_app": true,
      "auto_services": [
        {
          "plan": "second-plan",
          "name": "tg-test-broker1-service",
          "service_instance": "tg-test-svc"
        }
      ],
      "is_docker": true,
      "package-type": "docker-app",
      "app_manifest": {
        "memory": "256M"
      },
      "properties": {
        "tg_test_app3": {
          "auto_services": [
            {
              "plan": "second-plan",
              "name": "tg-test-broker1-service",
              "service_instance": "tg-test-svc"
            }
          ],
          "name": "tg_test_app3",
          "app_manifest": {
            "memory": "256M"
          }
        }
      }
    },
    {
      "files": [
        {
          "path": "docker:guidowb/sample-cf-app",
          "name": "guidowb-sample-cf-app.tgz"
        }
      ],
      "ephemeral_disk": 4096,
      "name": "tg_test_app4",
      "docker_images": [
        "guidowb/sample-cf-app"
      ],
      "is_docker_bosh": true,
      "manifest": {
        "containers": [
          {
            "bind_ports": [
              "80:80",
              "443:443",
              "8080:8080",
              "8443:8443"
            ],
            "image": "guidowb/sample-cf-app",
            "env_file": [
              "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
            ],
            "name": "app"
          }
        ]
      },
      "instances": 1,
      "persistent_disk": 2048,
      "is_docker": true,
      "memory": 512,
      "routes": [
        {
          "prefix": "my-route",
          "port": 8080
        }
      ],
      "package-type": "docker-bosh",
      "cpu": 2,
      "properties": {
        "tg_test_app4": {
          "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
          "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
          "name": "tg_test_app4"
        }
      }
    },
    {
      "jobs": [
        {
          "templates": [
            {
              "release": "redis",
              "name": "redis"
            }
          ],
          "ephemeral_disk": 4096,
          "dynamic_ip": 1,
          "name": "redis",
          "varname": "redis",
          "is_static": false,
          "static_ip": 0,
          "instances": 2,
          "default_internet_connected": false,
          "max_in_flight": 1,
          "persistent_disk": 4096,
          "memory": 512,
          "cpu": 2,
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "type": "redis",
          "properties": {
            "password": "red!s"
          },
          "template": "redis"
        },
        {
          "templates": [
            {
              "release": "redis",
              "name": "sanity-tests"
            }
          ],
          "ephemeral_disk": 4096,
          "dynamic_ip": 1,
          "name": "sanity-tests",
          "post_deploy": true,
          "varname": "sanity_tests",
          "is_static": false,
          "lifecycle": "errand",
          "cpu": 2,
          "persistent_disk": 0,
          "memory": 512,
          "run_post_deploy_errand_default": "when-changed",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "some": "property",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "space": "(( .properties.space.value ))",
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "author": "(( .properties.author.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "type": "sanity-tests",
          "properties": {
            "cf": {
              "some": "property"
            }
          },
          "template": "sanity-tests"
        }
      ],
      "name": "tg_test_app5",
      "path": "resources/redis-13.1.2.tgz",
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "tg_test_app5": {
          "name": "tg_test_app5"
        }
      }
    },
    {
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "runtime_test_release": {
          "name": "runtime_test_release"
        }
      },
      "name": "runtime_test_release",
      "path": "resources/runtime-test-release.tgz"
    },
    {
      "jobs": [
        {
          "templates": [
            {
              "release": "no-op-release",
              "name": "no-op"
            },
            {
              "release": "routing",
              "name": "route_registrar",
              "consumes": {
                "nats": {
                  "from": "nats",
                  "deployment": "(( ..cf.deployment_name ))"
                }
              }
            }
          ],
          "is_static": false,
          "dynamic_ip": 1,
          "name": "node-yes",
          "varname": "node_yes",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ],
                  "port": 8119,
                  "name": "runtime_conf_yes"
                }
              ]
            },
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "instances": 1,
          "template": "node-yes",
          "type": "node-yes",
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "port": 8119,
                  "name": "runtime_conf_yes",
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }
        },
        {
          "templates": [
            {
              "release": "routing",
              "name": "route_registrar",
              "consumes": {
                "nats": {
                  "from": "nats",
                  "deployment": "(( ..cf.deployment_name ))"
                }
              }
            }
          ],
          "is_static": false,
          "dynamic_ip": 1,
          "name": "node-no",
          "varname": "node_no",
          "manifest": {
            "tg_test_app6": {
              "name": "tg_test_app6"
            },
            "domain": "(( ..cf.cloud_controller.system_domain.value ))",
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.example_selector.value ))"
            },
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))",
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "path": "app",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1_auto_zip"
            },
            "cf": {
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))",
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))"
            },
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))",
              "name": "tg_test_buildpack"
            },
            "planets": "(( .properties.planets.value ))",
            "app_instances": "(( .properties.app_instances.value ))",
            "customer_name": "(( .properties.customer_name.value ))",
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ],
            "city": "(( .properties.city.value ))",
            "author": "(( .properties.author.value ))",
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ],
                  "port": 8119,
                  "name": "runtime_conf_no"
                }
              ]
            },
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))",
              "value": "(( .properties.is_feature_enabled.value ))"
            },
            "runtime_test_release": {
              "name": "runtime_test_release"
            },
            "tg_test_broker2": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker2",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "zip_code": "(( .properties.zip_code.value ))",
            "username": "(( .properties.username.value ))",
            "tg_test_app4": {
              "host": "(( .docker-bosh-tg_test_app4.first_ip ))",
              "hosts": "(( .docker-bosh-tg_test_app4.ips ))",
              "name": "tg_test_app4"
            },
            "tg_test_app5": {
              "name": "tg_test_app5"
            },
            "tg_test_app2": {
              "app_manifest": {
                "path": "app.zip",
                "host": "tg-test-app2-hostname",
                "command": "python app.py",
                "buildpack": "python_buildpack",
                "memory": "256M"
              },
              "auto_services": [
                {
                  "name": "tg-test-broker1-service",
                  "plan": "first-plan"
                },
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ],
              "name": "tg_test_app2"
            },
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              },
              "auto_services": [
                {
                  "service_instance": "tg-test-svc",
                  "plan": "second-plan",
                  "name": "tg-test-broker1-service"
                }
              ],
              "name": "tg_test_app3"
            },
            "tg_test_app1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "instances": "(( .properties.app_instances.value ))",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_app1"
            },
            "my_creds": {
              "password": "(( .properties.my_creds.password ))",
              "identity": "(( .properties.my_creds.identity ))"
            },
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))",
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))",
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            },
            "org": "(( .properties.org.value ))",
            "password": "(( .properties.password.value ))",
            "tg_test_binary_app": {
              "app_manifest": {
                "path": "binary-app.py",
                "buildpack": "binary_buildpack",
                "command": "./binary-app.py",
                "memory": "256M"
              },
              "auto_services": [],
              "name": "tg_test_binary_app"
            },
            "country": "(( .properties.country.value ))",
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))",
            "space": "(( .properties.space.value ))",
            "auto_service_name": "(( .properties.auto_service_name.value ))",
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))",
            "tg_test_decorator": {
              "buildpack_order": "(( .properties.tg_test_decorator_buildpack_order.value ))",
              "name": "tg_test_decorator"
            },
            "tg_test_broker1": {
              "app_manifest": {
                "path": "app.zip",
                "buildpack": "python_buildpack",
                "command": "python app.py",
                "memory": "256M"
              },
              "name": "tg_test_broker1",
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))",
              "auto_services": []
            },
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))",
            "example_collection": "(( .properties.example_collection.value ))",
            "street_address": "(( .properties.street_address.value ))"
          },
          "instances": 1,
          "template": "node-no",
          "type": "node-no",
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "registration_interval": "20s",
                  "port": 8119,
                  "name": "runtime_conf_no",
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }
        }
      ],
      "name": "tg_test_app6",
      "path": "resources/no-op-release.tgz",
      "package-type": "bosh-release",
      "is_bosh_release": true,
      "properties": {
        "tg_test_app6": {
          "name": "tg_test_app6"
        }
      }
    }
  ],
  "org": "test-tile-org",
  "service_plan_forms": [
    {
      "description": "Custom Dynamic service plan 1 for Test Tile",
      "label": "Custom Dynamic Service Plan 1",
      "properties": [
        {
          "type": "string",
          "description": "The description of this plan",
          "name": "description1",
          "configurable": true
        },
        {
          "type": "string",
          "description": "The license key for this plan",
          "name": "license_key1",
          "configurable": true
        },
        {
          "description": "The number of available seats for this license",
          "default": 1,
          "name": "num_seats1",
          "configurable": true,
          "type": "integer",
          "constraints": {
            "max": 500,
            "min": 1
          }
        }
      ],
      "name": "custom_dynamic_service_plan_1",
      "variable_name": "CUSTOM_DYNAMIC_SERVICE_PLAN_1"
    },
    {
      "description": "Custom Dynamic service plan 2 for Test Tile",
      "label": "Custom Dynamic Service Plan 2",
      "properties": [
        {
          "type": "string",
          "description": "The description of this plan",
          "name": "description2",
          "configurable": true
        },
        {
          "type": "string",
          "description": "The api key for this plan",
          "name": "api_key2",
          "configurable": true
        },
        {
          "default": 1,
          "type": "integer",
          "description": "The number of licenses",
          "name": "num_of_license2",
          "configurable": true
        }
      ],
      "name": "custom_dynamic_service_plan_2",
      "variable_name": "CUSTOM_DYNAMIC_SERVICE_PLAN_2"
    }
  ],
  "properties": [
    {
      "name": "author",
      "default": "Tile Ninja",
      "optional": false,
      "label": "Author",
      "configurable": false,
      "type": "string"
    },
    {
      "type": "string",
      "label": "Full Name",
      "optional": true,
      "name": "customer_name",
      "configurable": true
    },
    {
      "description": "Address to use for junk mail",
      "type": "string",
      "label": "Street Address",
      "configurable": true,
      "optional": false,
      "name": "street_address"
    },
    {
      "type": "string",
      "label": "City",
      "optional": false,
      "name": "city",
      "configurable": true
    },
    {
      "name": "zip_code",
      "default": "90310",
      "type": "string",
      "label": "ZIP+4",
      "configurable": true,
      "optional": false
    },
    {
      "name": "country",
      "type": "dropdown_select",
      "label": "Country",
      "configurable": true,
      "optional": false,
      "options": [
        {
          "default": true,
          "name": "country_us",
          "label": "US"
        },
        {
          "name": "country_elsewhere",
          "label": "Elsewhere"
        }
      ]
    },
    {
      "name": "example_collection",
      "default": [
        {
          "album": "Christmas Carols",
          "explicit": true,
          "artist": "Ops Manatee"
        }
      ],
      "optional": false,
      "configurable": true,
      "property_blueprints": [
        {
          "type": "string",
          "name": "album",
          "label": "Album"
        },
        {
          "type": "string",
          "name": "artist",
          "label": "Artist"
        },
        {
          "type": "boolean",
          "name": "explicit",
          "label": "Explicit"
        }
      ],
      "label": "Albums",
      "type": "collection"
    },
    {
      "name": "example_selector",
      "default": "Pizza",
      "optional": false,
      "configurable": true,
      "option_templates": [
        {
          "select_value": "Pizza",
          "name": "pizza_option",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "boolean",
              "name": "pepperoni",
              "label": "Pepperoni"
            },
            {
              "configurable": true,
              "type": "boolean",
              "name": "pineapple",
              "label": "Pineapple"
            },
            {
              "optional": true,
              "configurable": true,
              "type": "string",
              "name": "other_toppings",
              "label": "Other Toppings"
            }
          ]
        },
        {
          "select_value": "Filet Mignon",
          "name": "filet_mignon_option",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "simple_credentials",
              "name": "steak_creds",
              "label": "Complex type inside selector"
            },
            {
              "name": "rarity_dropdown",
              "default": "rare",
              "configurable": true,
              "label": "How rare?",
              "type": "dropdown_select",
              "options": [
                {
                  "name": "rare",
                  "label": "Rare"
                },
                {
                  "name": "medium",
                  "label": "Medium"
                },
                {
                  "name": "well-done",
                  "label": "Well done"
                }
              ]
            }
          ]
        }
      ],
      "label": "Food Choices",
      "type": "selector"
    },
    {
      "description": "Example of simple credentials type",
      "type": "simple_credentials",
      "label": "Simple Credentials",
      "configurable": true,
      "optional": false,
      "name": "my_creds"
    },
    {
      "name": "username",
      "type": "string",
      "label": "Username",
      "configurable": true,
      "optional": false,
      "constraints": [
        {
          "must_match_regex": "^[^!@#$%^&*()]*$",
          "error_message": "This name cannot contain capital digits."
        }
      ]
    },
    {
      "type": "secret",
      "label": "Password",
      "optional": false,
      "name": "password",
      "configurable": true
    },
    {
      "description": "Maximum amount of time to allow canaries to take before going healthy",
      "type": "integer",
      "label": "Canary Watch Timeout",
      "configurable": true,
      "optional": false,
      "name": "canary_watch_timeout"
    },
    {
      "description": "Maximum amount of time to allow non-canaries to take before going healthy",
      "type": "integer",
      "label": "Update Watch Timeout",
      "configurable": true,
      "optional": false,
      "name": "update_watch_timeout"
    },
    {
      "description": "Choose whether or not to enable this feature.",
      "default": "feature_disabled",
      "type": "selector",
      "label": "Enable this feature?",
      "option_templates": [
        {
          "select_value": "feature_enabled",
          "description": "Enable this feature (requires more config).",
          "property_blueprints": [
            {
              "configurable": true,
              "type": "string",
              "name": "feature_config",
              "label": "Configure this feature"
            }
          ],
          "name": "feature_enabled",
          "label": "Enable feature"
        },
        {
          "select_value": "feature_disabled",
          "description": "Disable this feature (no more config).",
          "name": "feature_disabled",
          "label": "Disable feature"
        }
      ],
      "configurable": true,
      "optional": false,
      "name": "is_feature_enabled"
    },
    {
      "name": "planets",
      "type": "multi_select_options",
      "label": "Planets",
      "configurable": true,
      "optional": true,
      "options": [
        {
          "name": "mercury",
          "label": "mercury"
        },
        {
          "name": "Venus",
          "label": "venus"
        },
        {
          "name": "Earth",
          "label": "earth"
        },
        {
          "name": "Mars",
          "label": "mars"
        },
        {
          "name": "Jupiter",
          "label": "jupiter"
        },
        {
          "name": "Saturn",
          "label": "saturn"
        },
        {
          "name": "Uranus",
          "label": "uranus"
        },
        {
          "name": "Neptune",
          "label": "neptune"
        }
      ]
    },
    {
      "name": "app_instances",
      "default": 2,
      "type": "integer",
      "label": "Dynamic app instance count",
      "configurable": true,
      "optional": false
    },
    {
      "name": "auto_service_name",
      "default": "tg-test-broker1-service",
      "type": "string",
      "label": "Auto services service name",
      "configurable": true,
      "optional": false
    }
  ],
  "stemcell_criteria": {
    "os": "ubuntu-trusty"
  },
  "sha1": false,
  "name": "test-tile",
  "allow_paid_service_plans": true,
  "purge_service_brokers": true,
  "requires_docker_bosh": true
}
